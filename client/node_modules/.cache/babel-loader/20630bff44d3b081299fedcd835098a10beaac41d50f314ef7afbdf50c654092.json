{"ast":null,"code":"import React, { forwardRef, useState, useEffect, useMemo } from 'react';\nimport { usePrevious } from '@mantine/hooks';\nimport { MachineNumber } from './MachineNumber.js';\nimport useStyles from './Machine.styles.js';\nconst Machine = forwardRef(({\n  value = 0,\n  max\n}, ref) => {\n  const [oldValue, setOldValue] = useState();\n  const [newValue, setNewValue] = useState();\n  const prevValueRef = usePrevious(value);\n  useEffect(() => {\n    if (typeof value === \"string\") {\n      setOldValue(void 0);\n      setNewValue(void 0);\n    } else if (typeof prevValueRef === \"string\") {\n      setOldValue(void 0);\n      setNewValue(value);\n    } else {\n      setOldValue(prevValueRef);\n      setNewValue(value);\n    }\n  }, [value, prevValueRef]);\n  const numbers = useMemo(() => {\n    if (typeof value === \"string\") {\n      return [];\n    }\n    if (value < 1) {\n      return [0];\n    }\n    const result = [];\n    let currentValue = value;\n    if (typeof max === \"number\") {\n      currentValue = Math.min(max, currentValue);\n    }\n    while (currentValue >= 1) {\n      result.push(currentValue % 10);\n      currentValue /= 10;\n      currentValue = Math.floor(currentValue);\n    }\n    result.reverse();\n    return result;\n  }, [value, max]);\n  const {\n    classes\n  } = useStyles(null, {\n    name: \"machine\"\n  });\n  return typeof value === \"string\" ? /* @__PURE__ */React.createElement(\"span\", {\n    ref\n  }, value) : /* @__PURE__ */React.createElement(\"span\", {\n    ref,\n    className: classes.base\n  }, numbers.map((number, i) => /* @__PURE__ */React.createElement(MachineNumber, {\n    key: numbers.length - i - 1,\n    value: number,\n    oldOriginalNumber: oldValue,\n    newOriginalNumber: newValue\n  })), typeof max === \"number\" && value > max && /* @__PURE__ */React.createElement(\"span\", null, \"+\"));\n});\nexport { Machine };","map":{"version":3,"names":["Machine","forwardRef","value","max","ref","oldValue","setOldValue","useState","newValue","setNewValue","prevValueRef","usePrevious","useEffect","numbers","useMemo","result","currentValue","Math","min","push","floor","reverse","classes","useStyles","name","React","createElement","className","base","map","number","i","MachineNumber","key","length","oldOriginalNumber","newOriginalNumber"],"sources":["/Users/isabelagadagba/Downloads/blog-main 2/template/client/node_modules/@mantine/core/src/Indicator/Machine/Machine.tsx"],"sourcesContent":["import React, { useState, forwardRef, useMemo, useEffect } from 'react';\nimport { usePrevious } from '@mantine/hooks';\nimport { MachineNumber } from './MachineNumber';\nimport useStyles from './Machine.styles';\n\ninterface MachineNumberProps {\n  value: number | string;\n  max: number;\n}\n\nexport const Machine = forwardRef<HTMLDivElement, MachineNumberProps>(({ value = 0, max }, ref) => {\n  const [oldValue, setOldValue] = useState<number>();\n  const [newValue, setNewValue] = useState<number>();\n  const prevValueRef = usePrevious(value);\n\n  useEffect(() => {\n    if (typeof value === 'string') {\n      setOldValue(undefined);\n      setNewValue(undefined);\n    } else if (typeof prevValueRef === 'string') {\n      setOldValue(undefined);\n      setNewValue(value);\n    } else {\n      setOldValue(prevValueRef);\n      setNewValue(value);\n    }\n  }, [value, prevValueRef]);\n\n  const numbers = useMemo(() => {\n    if (typeof value === 'string') {\n      return [];\n    }\n\n    if (value < 1) {\n      return [0];\n    }\n\n    const result: number[] = [];\n    let currentValue = value;\n\n    if (typeof max === 'number') {\n      currentValue = Math.min(max, currentValue);\n    }\n\n    while (currentValue >= 1) {\n      result.push(currentValue % 10);\n      currentValue /= 10;\n      currentValue = Math.floor(currentValue);\n    }\n\n    result.reverse();\n    return result;\n  }, [value, max]);\n\n  const { classes } = useStyles(null, { name: 'machine' });\n\n  return typeof value === 'string' ? (\n    <span ref={ref}>{value}</span>\n  ) : (\n    <span ref={ref} className={classes.base}>\n      {numbers.map((number, i) => (\n        <MachineNumber\n          key={numbers.length - i - 1}\n          value={number}\n          oldOriginalNumber={oldValue}\n          newOriginalNumber={newValue}\n        />\n      ))}\n      {typeof max === 'number' && value > max && <span>+</span>}\n    </span>\n  );\n});\n"],"mappings":";;;;AAIY,MAACA,OAAO,GAAGC,UAAU,CAAC,CAAC;EAAEC,KAAK,GAAG,CAAC;EAAEC;AAAG,CAAE,EAAEC,GAAG,KAAK;EAC7D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,EAAE;EAC1C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGF,QAAQ,EAAE;EAC1C,MAAMG,YAAY,GAAGC,WAAW,CAACT,KAAK,CAAC;EACvCU,SAAS,CAAC,MAAM;IACd,IAAI,OAAOV,KAAK,KAAK,QAAQ,EAAE;MAC7BI,WAAW,CAAC,KAAK,CAAC,CAAC;MACnBG,WAAW,CAAC,KAAK,CAAC,CAAC;IACzB,CAAK,MAAM,IAAI,OAAOC,YAAY,KAAK,QAAQ,EAAE;MAC3CJ,WAAW,CAAC,KAAK,CAAC,CAAC;MACnBG,WAAW,CAACP,KAAK,CAAC;IACxB,CAAK,MAAM;MACLI,WAAW,CAACI,YAAY,CAAC;MACzBD,WAAW,CAACP,KAAK,CAAC;IACxB;EACA,CAAG,EAAE,CAACA,KAAK,EAAEQ,YAAY,CAAC,CAAC;EACzB,MAAMG,OAAO,GAAGC,OAAO,CAAC,MAAM;IAC5B,IAAI,OAAOZ,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAO,EAAE;IACf;IACI,IAAIA,KAAK,GAAG,CAAC,EAAE;MACb,OAAO,CAAC,CAAC,CAAC;IAChB;IACI,MAAMa,MAAM,GAAG,EAAE;IACjB,IAAIC,YAAY,GAAGd,KAAK;IACxB,IAAI,OAAOC,GAAG,KAAK,QAAQ,EAAE;MAC3Ba,YAAY,GAAGC,IAAI,CAACC,GAAG,CAACf,GAAG,EAAEa,YAAY,CAAC;IAChD;IACI,OAAOA,YAAY,IAAI,CAAC,EAAE;MACxBD,MAAM,CAACI,IAAI,CAACH,YAAY,GAAG,EAAE,CAAC;MAC9BA,YAAY,IAAI,EAAE;MAClBA,YAAY,GAAGC,IAAI,CAACG,KAAK,CAACJ,YAAY,CAAC;IAC7C;IACID,MAAM,CAACM,OAAO,EAAE;IAChB,OAAON,MAAM;EACjB,CAAG,EAAE,CAACb,KAAK,EAAEC,GAAG,CAAC,CAAC;EAChB,MAAM;IAAEmB;EAAO,CAAE,GAAGC,SAAS,CAAC,IAAI,EAAE;IAAEC,IAAI,EAAE;EAAS,CAAE,CAAC;EACxD,OAAO,OAAOtB,KAAK,KAAK,QAAQ,kBAAmBuB,KAAK,CAACC,aAAa,CAAC,MAAM,EAAE;IAC7EtB;EACJ,CAAG,EAAEF,KAAK,CAAC,kBAAmBuB,KAAK,CAACC,aAAa,CAAC,MAAM,EAAE;IACtDtB,GAAG;IACHuB,SAAS,EAAEL,OAAO,CAACM;EACvB,CAAG,EAAEf,OAAO,CAACgB,GAAG,CAAC,CAACC,MAAM,EAAEC,CAAC,oBAAqBN,KAAK,CAACC,aAAa,CAACM,aAAa,EAAE;IAC/EC,GAAG,EAAEpB,OAAO,CAACqB,MAAM,GAAGH,CAAC,GAAG,CAAC;IAC3B7B,KAAK,EAAE4B,MAAM;IACbK,iBAAiB,EAAE9B,QAAQ;IAC3B+B,iBAAiB,EAAE5B;EACvB,CAAG,CAAC,CAAC,EAAE,OAAOL,GAAG,KAAK,QAAQ,IAAID,KAAK,GAAGC,GAAG,mBAAoBsB,KAAK,CAACC,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;AACxG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}