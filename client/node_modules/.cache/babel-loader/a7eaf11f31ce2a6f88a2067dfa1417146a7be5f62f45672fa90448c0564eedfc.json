{"ast":null,"code":"import { HandlebarHelpersEnum } from './handlebarHelpers';\nimport { TemplateVariableTypeEnum } from '../../types';\nexport function getTemplateVariables(bod) {\n  const stringVariables = bod.filter(body => body.type === 'MustacheStatement').flatMap(body => {\n    var _a, _b, _c;\n    const varName = ((_a = body.params[0]) === null || _a === void 0 ? void 0 : _a.original) || body.path.original;\n    if (!shouldAddVariable(varName)) {\n      return [];\n    }\n    if ((_b = body.params[0]) === null || _b === void 0 ? void 0 : _b.original) {\n      if (!Object.values(HandlebarHelpersEnum).includes(body.path.original)) {\n        return [];\n      }\n    }\n    return {\n      type: TemplateVariableTypeEnum.STRING,\n      name: ((_c = body.params[0]) === null || _c === void 0 ? void 0 : _c.original) || body.path.original,\n      defaultValue: '',\n      required: false\n    };\n  });\n  const arrayVariables = bod.filter(body => body.type === 'BlockStatement' && ['each', 'with'].includes(body.path.original)).flatMap(body => {\n    var _a;\n    const varName = ((_a = body.params[0]) === null || _a === void 0 ? void 0 : _a.original) || body.path.original;\n    if (!shouldAddVariable(varName)) {\n      return [];\n    }\n    const nestedVariablesInBlock = getTemplateVariables(body.program.body).map(mustVar => {\n      return Object.assign(Object.assign({}, mustVar), {\n        name: `${varName}.${mustVar.name}`\n      });\n    });\n    if (['with'].includes(body.path.original)) {\n      return [...nestedVariablesInBlock];\n    }\n    return [{\n      type: TemplateVariableTypeEnum.ARRAY,\n      name: varName,\n      required: false\n    }, ...nestedVariablesInBlock];\n  });\n  const boolVariables = bod.filter(body => body.type === 'BlockStatement' && ['if', 'unless'].includes(body.path.original)).flatMap(body => {\n    var _a;\n    const varName = ((_a = body.params[0]) === null || _a === void 0 ? void 0 : _a.original) || body.path.original;\n    if (!shouldAddVariable(varName)) {\n      return [];\n    }\n    if (body.params.length > 1) {\n      return [];\n    }\n    const nestedVariablesInBlock = getTemplateVariables(body.program.body);\n    return [{\n      type: TemplateVariableTypeEnum.BOOLEAN,\n      name: varName,\n      defaultValue: true,\n      required: false\n    }, ...nestedVariablesInBlock];\n  });\n  return stringVariables.concat(arrayVariables).concat(boolVariables);\n}\nconst shouldAddVariable = variableName => {\n  const validRegExp = /^[a-zA-Z_][a-zA-Z0-9_-]*?/;\n  const isValid = variableName.match(validRegExp);\n  return isValid;\n};","map":{"version":3,"names":["HandlebarHelpersEnum","TemplateVariableTypeEnum","getTemplateVariables","bod","stringVariables","filter","body","type","flatMap","_a","_b","_c","varName","params","original","path","shouldAddVariable","Object","values","includes","STRING","name","defaultValue","required","arrayVariables","nestedVariablesInBlock","program","map","mustVar","assign","ARRAY","boolVariables","length","BOOLEAN","concat","variableName","validRegExp","isValid","match"],"sources":["/Users/isabelagadagba/Downloads/blog-main 2/NotionReact/client/node_modules/@novu/shared/dist/esm/consts/handlebar-helpers/getTemplateVariables.js"],"sourcesContent":["import { HandlebarHelpersEnum } from './handlebarHelpers';\nimport { TemplateVariableTypeEnum } from '../../types';\nexport function getTemplateVariables(bod) {\n    const stringVariables = bod\n        .filter((body) => body.type === 'MustacheStatement')\n        .flatMap((body) => {\n        var _a, _b, _c;\n        const varName = ((_a = body.params[0]) === null || _a === void 0 ? void 0 : _a.original) || body.path.original;\n        if (!shouldAddVariable(varName)) {\n            return [];\n        }\n        if ((_b = body.params[0]) === null || _b === void 0 ? void 0 : _b.original) {\n            if (!Object.values(HandlebarHelpersEnum).includes(body.path.original)) {\n                return [];\n            }\n        }\n        return {\n            type: TemplateVariableTypeEnum.STRING,\n            name: ((_c = body.params[0]) === null || _c === void 0 ? void 0 : _c.original) || body.path.original,\n            defaultValue: '',\n            required: false,\n        };\n    });\n    const arrayVariables = bod\n        .filter((body) => body.type === 'BlockStatement' && ['each', 'with'].includes(body.path.original))\n        .flatMap((body) => {\n        var _a;\n        const varName = ((_a = body.params[0]) === null || _a === void 0 ? void 0 : _a.original) || body.path.original;\n        if (!shouldAddVariable(varName)) {\n            return [];\n        }\n        const nestedVariablesInBlock = getTemplateVariables(body.program.body).map((mustVar) => {\n            return Object.assign(Object.assign({}, mustVar), { name: `${varName}.${mustVar.name}` });\n        });\n        if (['with'].includes(body.path.original)) {\n            return [...nestedVariablesInBlock];\n        }\n        return [\n            {\n                type: TemplateVariableTypeEnum.ARRAY,\n                name: varName,\n                required: false,\n            },\n            ...nestedVariablesInBlock,\n        ];\n    });\n    const boolVariables = bod\n        .filter((body) => body.type === 'BlockStatement' && ['if', 'unless'].includes(body.path.original))\n        .flatMap((body) => {\n        var _a;\n        const varName = ((_a = body.params[0]) === null || _a === void 0 ? void 0 : _a.original) || body.path.original;\n        if (!shouldAddVariable(varName)) {\n            return [];\n        }\n        if (body.params.length > 1) {\n            return [];\n        }\n        const nestedVariablesInBlock = getTemplateVariables(body.program.body);\n        return [\n            {\n                type: TemplateVariableTypeEnum.BOOLEAN,\n                name: varName,\n                defaultValue: true,\n                required: false,\n            },\n            ...nestedVariablesInBlock,\n        ];\n    });\n    return stringVariables.concat(arrayVariables).concat(boolVariables);\n}\nconst shouldAddVariable = (variableName) => {\n    const validRegExp = /^[a-zA-Z_][a-zA-Z0-9_-]*?/;\n    const isValid = variableName.match(validRegExp);\n    return isValid;\n};\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,oBAAoB;AACzD,SAASC,wBAAwB,QAAQ,aAAa;AACtD,OAAO,SAASC,oBAAoBA,CAACC,GAAG,EAAE;EACtC,MAAMC,eAAe,GAAGD,GAAG,CACtBE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,mBAAmB,CAAC,CACnDC,OAAO,CAAEF,IAAI,IAAK;IACnB,IAAIG,EAAE,EAAEC,EAAE,EAAEC,EAAE;IACd,MAAMC,OAAO,GAAG,CAAC,CAACH,EAAE,GAAGH,IAAI,CAACO,MAAM,CAAC,CAAC,CAAC,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACK,QAAQ,KAAKR,IAAI,CAACS,IAAI,CAACD,QAAQ;IAC9G,IAAI,CAACE,iBAAiB,CAACJ,OAAO,CAAC,EAAE;MAC7B,OAAO,EAAE;IACb;IACA,IAAI,CAACF,EAAE,GAAGJ,IAAI,CAACO,MAAM,CAAC,CAAC,CAAC,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,QAAQ,EAAE;MACxE,IAAI,CAACG,MAAM,CAACC,MAAM,CAAClB,oBAAoB,CAAC,CAACmB,QAAQ,CAACb,IAAI,CAACS,IAAI,CAACD,QAAQ,CAAC,EAAE;QACnE,OAAO,EAAE;MACb;IACJ;IACA,OAAO;MACHP,IAAI,EAAEN,wBAAwB,CAACmB,MAAM;MACrCC,IAAI,EAAE,CAAC,CAACV,EAAE,GAAGL,IAAI,CAACO,MAAM,CAAC,CAAC,CAAC,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACG,QAAQ,KAAKR,IAAI,CAACS,IAAI,CAACD,QAAQ;MACpGQ,YAAY,EAAE,EAAE;MAChBC,QAAQ,EAAE;IACd,CAAC;EACL,CAAC,CAAC;EACF,MAAMC,cAAc,GAAGrB,GAAG,CACrBE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,gBAAgB,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAACY,QAAQ,CAACb,IAAI,CAACS,IAAI,CAACD,QAAQ,CAAC,CAAC,CACjGN,OAAO,CAAEF,IAAI,IAAK;IACnB,IAAIG,EAAE;IACN,MAAMG,OAAO,GAAG,CAAC,CAACH,EAAE,GAAGH,IAAI,CAACO,MAAM,CAAC,CAAC,CAAC,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACK,QAAQ,KAAKR,IAAI,CAACS,IAAI,CAACD,QAAQ;IAC9G,IAAI,CAACE,iBAAiB,CAACJ,OAAO,CAAC,EAAE;MAC7B,OAAO,EAAE;IACb;IACA,MAAMa,sBAAsB,GAAGvB,oBAAoB,CAACI,IAAI,CAACoB,OAAO,CAACpB,IAAI,CAAC,CAACqB,GAAG,CAAEC,OAAO,IAAK;MACpF,OAAOX,MAAM,CAACY,MAAM,CAACZ,MAAM,CAACY,MAAM,CAAC,CAAC,CAAC,EAAED,OAAO,CAAC,EAAE;QAAEP,IAAI,EAAG,GAAET,OAAQ,IAAGgB,OAAO,CAACP,IAAK;MAAE,CAAC,CAAC;IAC5F,CAAC,CAAC;IACF,IAAI,CAAC,MAAM,CAAC,CAACF,QAAQ,CAACb,IAAI,CAACS,IAAI,CAACD,QAAQ,CAAC,EAAE;MACvC,OAAO,CAAC,GAAGW,sBAAsB,CAAC;IACtC;IACA,OAAO,CACH;MACIlB,IAAI,EAAEN,wBAAwB,CAAC6B,KAAK;MACpCT,IAAI,EAAET,OAAO;MACbW,QAAQ,EAAE;IACd,CAAC,EACD,GAAGE,sBAAsB,CAC5B;EACL,CAAC,CAAC;EACF,MAAMM,aAAa,GAAG5B,GAAG,CACpBE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,gBAAgB,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAACY,QAAQ,CAACb,IAAI,CAACS,IAAI,CAACD,QAAQ,CAAC,CAAC,CACjGN,OAAO,CAAEF,IAAI,IAAK;IACnB,IAAIG,EAAE;IACN,MAAMG,OAAO,GAAG,CAAC,CAACH,EAAE,GAAGH,IAAI,CAACO,MAAM,CAAC,CAAC,CAAC,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACK,QAAQ,KAAKR,IAAI,CAACS,IAAI,CAACD,QAAQ;IAC9G,IAAI,CAACE,iBAAiB,CAACJ,OAAO,CAAC,EAAE;MAC7B,OAAO,EAAE;IACb;IACA,IAAIN,IAAI,CAACO,MAAM,CAACmB,MAAM,GAAG,CAAC,EAAE;MACxB,OAAO,EAAE;IACb;IACA,MAAMP,sBAAsB,GAAGvB,oBAAoB,CAACI,IAAI,CAACoB,OAAO,CAACpB,IAAI,CAAC;IACtE,OAAO,CACH;MACIC,IAAI,EAAEN,wBAAwB,CAACgC,OAAO;MACtCZ,IAAI,EAAET,OAAO;MACbU,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE;IACd,CAAC,EACD,GAAGE,sBAAsB,CAC5B;EACL,CAAC,CAAC;EACF,OAAOrB,eAAe,CAAC8B,MAAM,CAACV,cAAc,CAAC,CAACU,MAAM,CAACH,aAAa,CAAC;AACvE;AACA,MAAMf,iBAAiB,GAAImB,YAAY,IAAK;EACxC,MAAMC,WAAW,GAAG,2BAA2B;EAC/C,MAAMC,OAAO,GAAGF,YAAY,CAACG,KAAK,CAACF,WAAW,CAAC;EAC/C,OAAOC,OAAO;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}