{"ast":null,"code":"import { CredentialsKeyEnum } from '../provider.enum';\nconst mailConfigBase = [{\n  key: CredentialsKeyEnum.From,\n  displayName: 'From email address',\n  description: 'Use the same email address you used to authenticate your delivery provider',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.SenderName,\n  displayName: 'Sender name',\n  type: 'string',\n  required: true\n}];\nconst smsConfigBase = [{\n  key: CredentialsKeyEnum.From,\n  displayName: 'From',\n  type: 'string',\n  required: true\n}];\nconst pushConfigBase = [];\nexport const mailJsConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.SecretKey,\n  displayName: 'Secret key',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const mailgunConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.BaseUrl,\n  displayName: 'Base URL',\n  type: 'string',\n  required: false\n}, {\n  key: CredentialsKeyEnum.User,\n  displayName: 'User name',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Domain,\n  displayName: 'Domain',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const mailjetConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.SecretKey,\n  displayName: 'API Secret',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const nexmoConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.SecretKey,\n  displayName: 'API secret',\n  type: 'string',\n  required: true\n}, ...smsConfigBase];\nexport const mandrillConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const nodemailerConfig = [{\n  key: CredentialsKeyEnum.User,\n  displayName: 'User',\n  type: 'string',\n  required: false\n}, {\n  key: CredentialsKeyEnum.Password,\n  displayName: 'Password',\n  type: 'string',\n  required: false\n}, {\n  key: CredentialsKeyEnum.Host,\n  displayName: 'Host',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Port,\n  displayName: 'Port',\n  type: 'number',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Secure,\n  displayName: 'Secure',\n  type: 'boolean',\n  required: false\n}, {\n  key: CredentialsKeyEnum.RequireTls,\n  displayName: 'Require TLS',\n  type: 'switch',\n  required: false\n}, {\n  key: CredentialsKeyEnum.IgnoreTls,\n  displayName: 'Ignore TLS',\n  type: 'switch',\n  required: false\n}, {\n  key: CredentialsKeyEnum.TlsOptions,\n  displayName: 'TLS options',\n  type: 'object',\n  required: false\n}, {\n  key: CredentialsKeyEnum.Domain,\n  displayName: 'DKIM: Domain name',\n  type: 'string',\n  required: false\n}, {\n  key: CredentialsKeyEnum.SecretKey,\n  displayName: 'DKIM: Private key',\n  type: 'string',\n  required: false\n}, {\n  key: CredentialsKeyEnum.AccountSid,\n  displayName: 'DKIM: Key selector',\n  type: 'string',\n  required: false\n}, ...mailConfigBase];\nexport const postmarkConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const sendgridConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.IpPoolName,\n  displayName: 'IP Pool Name',\n  type: 'string',\n  required: false\n}, ...mailConfigBase];\nexport const resendConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const mailtrapConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const plunkConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const sparkpostConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Region,\n  displayName: 'EU',\n  description: 'Use `eu` if your account is registered to SparkPost EU',\n  type: 'boolean',\n  required: false\n}, ...mailConfigBase];\nexport const netCoreConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const sendinblueConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const sesConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'Access key ID',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.SecretKey,\n  displayName: 'Secret access key',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Region,\n  displayName: 'Region',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const mailerSendConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const plivoConfig = [{\n  key: CredentialsKeyEnum.AccountSid,\n  displayName: 'Account SID',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Token,\n  displayName: 'Auth token',\n  type: 'string',\n  required: true\n}, ...smsConfigBase];\nexport const sms77Config = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, ...smsConfigBase];\nexport const termiiConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, ...smsConfigBase];\nexport const burstSmsConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.SecretKey,\n  displayName: 'API Secret',\n  type: 'string',\n  required: true\n}];\nexport const clickatellConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}];\nexport const snsConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'Access key ID',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.SecretKey,\n  displayName: 'Secret access key',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Region,\n  displayName: 'AWS region',\n  type: 'string',\n  required: true\n}];\nexport const telnyxConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.MessageProfileId,\n  displayName: 'Message profile ID',\n  type: 'string',\n  required: true\n}, ...smsConfigBase];\nexport const twilioConfig = [{\n  key: CredentialsKeyEnum.AccountSid,\n  displayName: 'Account SID',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Token,\n  displayName: 'Auth token',\n  type: 'string',\n  required: true\n}, ...smsConfigBase];\nexport const slackConfig = [{\n  key: CredentialsKeyEnum.ApplicationId,\n  displayName: 'Application Id',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.ClientId,\n  displayName: 'Client ID',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.SecretKey,\n  displayName: 'Client Secret',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.RedirectUrl,\n  displayName: 'Redirect URL',\n  description: 'Redirect after Slack OAuth flow finished (default behaviour will close the tab)',\n  type: 'string',\n  required: false\n}, {\n  key: CredentialsKeyEnum.Hmac,\n  displayName: 'HMAC',\n  type: 'switch',\n  required: false\n}];\nexport const fcmConfig = [{\n  key: CredentialsKeyEnum.ServiceAccount,\n  displayName: 'Service Account (entire JSON file)',\n  type: 'text',\n  required: true\n}, ...pushConfigBase];\nexport const expoConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'Access Token',\n  type: 'text',\n  required: true\n}, ...pushConfigBase];\nexport const pushWebhookConfig = [{\n  key: CredentialsKeyEnum.WebhookUrl,\n  displayName: 'Webhook URL',\n  type: 'string',\n  description: 'the webhook URL to call to trigger push notifications',\n  required: true\n}, {\n  key: CredentialsKeyEnum.SecretKey,\n  displayName: 'Secret Hmac Key',\n  type: 'string',\n  description: 'the secret used to sign webhooks calls',\n  required: true\n}, ...pushConfigBase];\nexport const oneSignalConfig = [{\n  key: CredentialsKeyEnum.ApplicationId,\n  displayName: 'Application ID',\n  type: 'text',\n  required: true\n}, {\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'text',\n  required: true\n}, ...pushConfigBase];\nexport const pushpadConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'Auth Token',\n  type: 'text',\n  required: true\n}, {\n  key: CredentialsKeyEnum.ApplicationId,\n  displayName: 'Project ID',\n  type: 'text',\n  required: true\n}, ...pushConfigBase];\nexport const apnsConfig = [{\n  key: CredentialsKeyEnum.SecretKey,\n  displayName: 'Private Key',\n  type: 'text',\n  required: true\n}, {\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'Key ID',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.ProjectName,\n  displayName: 'Team ID',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.ApplicationId,\n  displayName: 'Bundle ID',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Secure,\n  displayName: 'Production',\n  type: 'switch',\n  required: true\n}, ...pushConfigBase];\nexport const gupshupConfig = [{\n  key: CredentialsKeyEnum.User,\n  displayName: 'User id',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Password,\n  displayName: 'Password',\n  type: 'string',\n  required: true\n}];\nexport const firetextConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, ...smsConfigBase];\nexport const outlook365Config = [{\n  key: CredentialsKeyEnum.Password,\n  displayName: 'Password',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const infobipSMSConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.BaseUrl,\n  displayName: 'Base URL',\n  type: 'string',\n  required: true\n}, ...smsConfigBase];\nexport const infobipEmailConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.BaseUrl,\n  displayName: 'Base URL',\n  type: 'string',\n  required: true\n}, ...mailConfigBase];\nexport const fortySixElksConfig = [{\n  key: CredentialsKeyEnum.User,\n  displayName: 'Username',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Password,\n  displayName: 'Password',\n  type: 'string',\n  required: true\n}, ...smsConfigBase];\nexport const kannelConfig = [{\n  key: CredentialsKeyEnum.Host,\n  displayName: 'Host',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Port,\n  displayName: 'Port',\n  type: 'number',\n  required: true\n}, {\n  key: CredentialsKeyEnum.User,\n  displayName: 'Username',\n  type: 'string',\n  required: false\n}, {\n  key: CredentialsKeyEnum.Password,\n  displayName: 'Password',\n  type: 'string',\n  required: false\n}, ...smsConfigBase];\nexport const maqsamConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'Access Key ID',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.SecretKey,\n  displayName: 'Access Secret',\n  type: 'string',\n  required: true\n}, ...smsConfigBase];\nexport const smsCentralConfig = [{\n  key: CredentialsKeyEnum.User,\n  displayName: 'Username',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Password,\n  displayName: 'Password',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.BaseUrl,\n  displayName: 'Base URL',\n  type: 'string',\n  required: false\n}, ...smsConfigBase];\nexport const emailWebhookConfig = [{\n  key: CredentialsKeyEnum.WebhookUrl,\n  displayName: 'Webhook URL',\n  type: 'string',\n  description: 'the webhook URL to call instead of sending the email',\n  required: true\n}, {\n  key: CredentialsKeyEnum.SecretKey,\n  displayName: 'Secret Hmac Key',\n  type: 'string',\n  description: 'the secret used to sign webhooks calls',\n  required: true\n}, ...mailConfigBase];\nexport const africasTalkingConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, {\n  key: CredentialsKeyEnum.User,\n  displayName: 'Username',\n  type: 'string',\n  required: true\n}, ...smsConfigBase];\nexport const novuInAppConfig = [{\n  key: CredentialsKeyEnum.Hmac,\n  displayName: 'Security HMAC encryption',\n  type: 'switch',\n  required: false,\n  tooltip: {\n    text: 'When active it verifies if a request is performed by a specific user',\n    when: false\n  }\n}];\nexport const sendchampConfig = [{\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'string',\n  required: true\n}, ...smsConfigBase];\nexport const clickSendConfig = [{\n  key: CredentialsKeyEnum.User,\n  displayName: 'Username',\n  description: 'Your Clicksend API username',\n  type: 'text',\n  required: true\n}, {\n  key: CredentialsKeyEnum.ApiKey,\n  displayName: 'API Key',\n  type: 'text',\n  required: true\n}, ...smsConfigBase];\nexport const bandwidthConfig = [{\n  key: CredentialsKeyEnum.User,\n  displayName: 'Username',\n  description: 'Your Bandwidth account username',\n  type: 'text',\n  required: true\n}, {\n  key: CredentialsKeyEnum.Password,\n  displayName: 'Password',\n  type: 'password',\n  required: true\n}, {\n  key: CredentialsKeyEnum.AccountSid,\n  displayName: 'Account ID',\n  type: 'text',\n  required: true\n}, ...smsConfigBase];","map":{"version":3,"names":["CredentialsKeyEnum","mailConfigBase","key","From","displayName","description","type","required","SenderName","smsConfigBase","pushConfigBase","mailJsConfig","ApiKey","SecretKey","mailgunConfig","BaseUrl","User","Domain","mailjetConfig","nexmoConfig","mandrillConfig","nodemailerConfig","Password","Host","Port","Secure","RequireTls","IgnoreTls","TlsOptions","AccountSid","postmarkConfig","sendgridConfig","IpPoolName","resendConfig","mailtrapConfig","plunkConfig","sparkpostConfig","Region","netCoreConfig","sendinblueConfig","sesConfig","mailerSendConfig","plivoConfig","Token","sms77Config","termiiConfig","burstSmsConfig","clickatellConfig","snsConfig","telnyxConfig","MessageProfileId","twilioConfig","slackConfig","ApplicationId","ClientId","RedirectUrl","Hmac","fcmConfig","ServiceAccount","expoConfig","pushWebhookConfig","WebhookUrl","oneSignalConfig","pushpadConfig","apnsConfig","ProjectName","gupshupConfig","firetextConfig","outlook365Config","infobipSMSConfig","infobipEmailConfig","fortySixElksConfig","kannelConfig","maqsamConfig","smsCentralConfig","emailWebhookConfig","africasTalkingConfig","novuInAppConfig","tooltip","text","when","sendchampConfig","clickSendConfig","bandwidthConfig"],"sources":["/Users/isabelagadagba/Downloads/blog-main 2/NotionReact/client/node_modules/@novu/shared/dist/esm/consts/providers/credentials/provider-credentials.js"],"sourcesContent":["import { CredentialsKeyEnum } from '../provider.enum';\nconst mailConfigBase = [\n    {\n        key: CredentialsKeyEnum.From,\n        displayName: 'From email address',\n        description: 'Use the same email address you used to authenticate your delivery provider',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.SenderName,\n        displayName: 'Sender name',\n        type: 'string',\n        required: true,\n    },\n];\nconst smsConfigBase = [\n    {\n        key: CredentialsKeyEnum.From,\n        displayName: 'From',\n        type: 'string',\n        required: true,\n    },\n];\nconst pushConfigBase = [];\nexport const mailJsConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.SecretKey,\n        displayName: 'Secret key',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const mailgunConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.BaseUrl,\n        displayName: 'Base URL',\n        type: 'string',\n        required: false,\n    },\n    {\n        key: CredentialsKeyEnum.User,\n        displayName: 'User name',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Domain,\n        displayName: 'Domain',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const mailjetConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.SecretKey,\n        displayName: 'API Secret',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const nexmoConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.SecretKey,\n        displayName: 'API secret',\n        type: 'string',\n        required: true,\n    },\n    ...smsConfigBase,\n];\nexport const mandrillConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const nodemailerConfig = [\n    {\n        key: CredentialsKeyEnum.User,\n        displayName: 'User',\n        type: 'string',\n        required: false,\n    },\n    {\n        key: CredentialsKeyEnum.Password,\n        displayName: 'Password',\n        type: 'string',\n        required: false,\n    },\n    {\n        key: CredentialsKeyEnum.Host,\n        displayName: 'Host',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Port,\n        displayName: 'Port',\n        type: 'number',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Secure,\n        displayName: 'Secure',\n        type: 'boolean',\n        required: false,\n    },\n    {\n        key: CredentialsKeyEnum.RequireTls,\n        displayName: 'Require TLS',\n        type: 'switch',\n        required: false,\n    },\n    {\n        key: CredentialsKeyEnum.IgnoreTls,\n        displayName: 'Ignore TLS',\n        type: 'switch',\n        required: false,\n    },\n    {\n        key: CredentialsKeyEnum.TlsOptions,\n        displayName: 'TLS options',\n        type: 'object',\n        required: false,\n    },\n    {\n        key: CredentialsKeyEnum.Domain,\n        displayName: 'DKIM: Domain name',\n        type: 'string',\n        required: false,\n    },\n    {\n        key: CredentialsKeyEnum.SecretKey,\n        displayName: 'DKIM: Private key',\n        type: 'string',\n        required: false,\n    },\n    {\n        key: CredentialsKeyEnum.AccountSid,\n        displayName: 'DKIM: Key selector',\n        type: 'string',\n        required: false,\n    },\n    ...mailConfigBase,\n];\nexport const postmarkConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const sendgridConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.IpPoolName,\n        displayName: 'IP Pool Name',\n        type: 'string',\n        required: false,\n    },\n    ...mailConfigBase,\n];\nexport const resendConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const mailtrapConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const plunkConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const sparkpostConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Region,\n        displayName: 'EU',\n        description: 'Use `eu` if your account is registered to SparkPost EU',\n        type: 'boolean',\n        required: false,\n    },\n    ...mailConfigBase,\n];\nexport const netCoreConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const sendinblueConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const sesConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'Access key ID',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.SecretKey,\n        displayName: 'Secret access key',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Region,\n        displayName: 'Region',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const mailerSendConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const plivoConfig = [\n    {\n        key: CredentialsKeyEnum.AccountSid,\n        displayName: 'Account SID',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Token,\n        displayName: 'Auth token',\n        type: 'string',\n        required: true,\n    },\n    ...smsConfigBase,\n];\nexport const sms77Config = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    ...smsConfigBase,\n];\nexport const termiiConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    ...smsConfigBase,\n];\nexport const burstSmsConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.SecretKey,\n        displayName: 'API Secret',\n        type: 'string',\n        required: true,\n    },\n];\nexport const clickatellConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n];\nexport const snsConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'Access key ID',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.SecretKey,\n        displayName: 'Secret access key',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Region,\n        displayName: 'AWS region',\n        type: 'string',\n        required: true,\n    },\n];\nexport const telnyxConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.MessageProfileId,\n        displayName: 'Message profile ID',\n        type: 'string',\n        required: true,\n    },\n    ...smsConfigBase,\n];\nexport const twilioConfig = [\n    {\n        key: CredentialsKeyEnum.AccountSid,\n        displayName: 'Account SID',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Token,\n        displayName: 'Auth token',\n        type: 'string',\n        required: true,\n    },\n    ...smsConfigBase,\n];\nexport const slackConfig = [\n    {\n        key: CredentialsKeyEnum.ApplicationId,\n        displayName: 'Application Id',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.ClientId,\n        displayName: 'Client ID',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.SecretKey,\n        displayName: 'Client Secret',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.RedirectUrl,\n        displayName: 'Redirect URL',\n        description: 'Redirect after Slack OAuth flow finished (default behaviour will close the tab)',\n        type: 'string',\n        required: false,\n    },\n    {\n        key: CredentialsKeyEnum.Hmac,\n        displayName: 'HMAC',\n        type: 'switch',\n        required: false,\n    },\n];\nexport const fcmConfig = [\n    {\n        key: CredentialsKeyEnum.ServiceAccount,\n        displayName: 'Service Account (entire JSON file)',\n        type: 'text',\n        required: true,\n    },\n    ...pushConfigBase,\n];\nexport const expoConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'Access Token',\n        type: 'text',\n        required: true,\n    },\n    ...pushConfigBase,\n];\nexport const pushWebhookConfig = [\n    {\n        key: CredentialsKeyEnum.WebhookUrl,\n        displayName: 'Webhook URL',\n        type: 'string',\n        description: 'the webhook URL to call to trigger push notifications',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.SecretKey,\n        displayName: 'Secret Hmac Key',\n        type: 'string',\n        description: 'the secret used to sign webhooks calls',\n        required: true,\n    },\n    ...pushConfigBase,\n];\nexport const oneSignalConfig = [\n    {\n        key: CredentialsKeyEnum.ApplicationId,\n        displayName: 'Application ID',\n        type: 'text',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'text',\n        required: true,\n    },\n    ...pushConfigBase,\n];\nexport const pushpadConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'Auth Token',\n        type: 'text',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.ApplicationId,\n        displayName: 'Project ID',\n        type: 'text',\n        required: true,\n    },\n    ...pushConfigBase,\n];\nexport const apnsConfig = [\n    {\n        key: CredentialsKeyEnum.SecretKey,\n        displayName: 'Private Key',\n        type: 'text',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'Key ID',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.ProjectName,\n        displayName: 'Team ID',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.ApplicationId,\n        displayName: 'Bundle ID',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Secure,\n        displayName: 'Production',\n        type: 'switch',\n        required: true,\n    },\n    ...pushConfigBase,\n];\nexport const gupshupConfig = [\n    {\n        key: CredentialsKeyEnum.User,\n        displayName: 'User id',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Password,\n        displayName: 'Password',\n        type: 'string',\n        required: true,\n    },\n];\nexport const firetextConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    ...smsConfigBase,\n];\nexport const outlook365Config = [\n    {\n        key: CredentialsKeyEnum.Password,\n        displayName: 'Password',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const infobipSMSConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.BaseUrl,\n        displayName: 'Base URL',\n        type: 'string',\n        required: true,\n    },\n    ...smsConfigBase,\n];\nexport const infobipEmailConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.BaseUrl,\n        displayName: 'Base URL',\n        type: 'string',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const fortySixElksConfig = [\n    {\n        key: CredentialsKeyEnum.User,\n        displayName: 'Username',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Password,\n        displayName: 'Password',\n        type: 'string',\n        required: true,\n    },\n    ...smsConfigBase,\n];\nexport const kannelConfig = [\n    {\n        key: CredentialsKeyEnum.Host,\n        displayName: 'Host',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Port,\n        displayName: 'Port',\n        type: 'number',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.User,\n        displayName: 'Username',\n        type: 'string',\n        required: false,\n    },\n    {\n        key: CredentialsKeyEnum.Password,\n        displayName: 'Password',\n        type: 'string',\n        required: false,\n    },\n    ...smsConfigBase,\n];\nexport const maqsamConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'Access Key ID',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.SecretKey,\n        displayName: 'Access Secret',\n        type: 'string',\n        required: true,\n    },\n    ...smsConfigBase,\n];\nexport const smsCentralConfig = [\n    {\n        key: CredentialsKeyEnum.User,\n        displayName: 'Username',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Password,\n        displayName: 'Password',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.BaseUrl,\n        displayName: 'Base URL',\n        type: 'string',\n        required: false,\n    },\n    ...smsConfigBase,\n];\nexport const emailWebhookConfig = [\n    {\n        key: CredentialsKeyEnum.WebhookUrl,\n        displayName: 'Webhook URL',\n        type: 'string',\n        description: 'the webhook URL to call instead of sending the email',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.SecretKey,\n        displayName: 'Secret Hmac Key',\n        type: 'string',\n        description: 'the secret used to sign webhooks calls',\n        required: true,\n    },\n    ...mailConfigBase,\n];\nexport const africasTalkingConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.User,\n        displayName: 'Username',\n        type: 'string',\n        required: true,\n    },\n    ...smsConfigBase,\n];\nexport const novuInAppConfig = [\n    {\n        key: CredentialsKeyEnum.Hmac,\n        displayName: 'Security HMAC encryption',\n        type: 'switch',\n        required: false,\n        tooltip: {\n            text: 'When active it verifies if a request is performed by a specific user',\n            when: false,\n        },\n    },\n];\nexport const sendchampConfig = [\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'string',\n        required: true,\n    },\n    ...smsConfigBase,\n];\nexport const clickSendConfig = [\n    {\n        key: CredentialsKeyEnum.User,\n        displayName: 'Username',\n        description: 'Your Clicksend API username',\n        type: 'text',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.ApiKey,\n        displayName: 'API Key',\n        type: 'text',\n        required: true,\n    },\n    ...smsConfigBase,\n];\nexport const bandwidthConfig = [\n    {\n        key: CredentialsKeyEnum.User,\n        displayName: 'Username',\n        description: 'Your Bandwidth account username',\n        type: 'text',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.Password,\n        displayName: 'Password',\n        type: 'password',\n        required: true,\n    },\n    {\n        key: CredentialsKeyEnum.AccountSid,\n        displayName: 'Account ID',\n        type: 'text',\n        required: true,\n    },\n    ...smsConfigBase,\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}