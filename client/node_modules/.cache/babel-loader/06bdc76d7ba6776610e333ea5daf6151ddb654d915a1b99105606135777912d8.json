{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useNovuContext } from './useNovuContext';\nimport { useFetchNotificationsQueryKey } from './useFetchNotificationsQueryKey';\nexport const useMarkNotificationsAsRead = (_a = {}) => {\n  var {\n      onSuccess\n    } = _a,\n    options = __rest(_a, [\"onSuccess\"]);\n  const queryClient = useQueryClient();\n  const {\n    apiService\n  } = useNovuContext();\n  const fetchNotificationsQueryKey = useFetchNotificationsQueryKey();\n  const _b = useMutation(({\n      feedId\n    }) => apiService.markAllMessagesAsRead(feedId), Object.assign(Object.assign({}, options), {\n      onSuccess: (responseData, variables, context) => {\n        queryClient.setQueriesData({\n          queryKey: fetchNotificationsQueryKey,\n          exact: false\n        }, infiniteData => {\n          const pages = infiniteData.pages.map(page => {\n            const data = page.data.map(message => {\n              return Object.assign(Object.assign({}, message), {\n                read: true,\n                seen: true\n              });\n            });\n            return Object.assign(Object.assign({}, page), {\n              data\n            });\n          });\n          return {\n            pageParams: infiniteData.pageParams,\n            pages\n          };\n        });\n        onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(responseData, variables, context);\n      }\n    })),\n    {\n      mutate\n    } = _b,\n    result = __rest(_b, [\"mutate\"]);\n  return Object.assign(Object.assign({}, result), {\n    markNotificationsAsRead: mutate\n  });\n};","map":{"version":3,"names":["useMutation","useQueryClient","useNovuContext","useFetchNotificationsQueryKey","useMarkNotificationsAsRead","_a","onSuccess","options","__rest","queryClient","apiService","fetchNotificationsQueryKey","_b","feedId","markAllMessagesAsRead","Object","assign","responseData","variables","context","setQueriesData","queryKey","exact","infiniteData","pages","map","page","data","message","read","seen","pageParams","mutate","result","markNotificationsAsRead"],"sources":["../../../src/hooks/useMarkNotificationAsRead.ts"],"sourcesContent":[null],"mappings":";;;;;;;;AACA,SAAuBA,WAAW,EAAsBC,cAAc,QAAQ,uBAAuB;AAErG,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,6BAA6B,QAAQ,iCAAiC;AAM/E,OAAO,MAAMC,0BAA0B,GAAGA,CAACC,EAAA,GAKoC,EAAE,KAAI;MAL1C;MACzCC;IAAS,IAAAD,EAIsE;IAH5EE,OAAO,GAAAC,MAAA,CAAAH,EAAA,EAF+B,aAG1C,CADW;EAIV,MAAMI,WAAW,GAAGR,cAAc,EAAE;EACpC,MAAM;IAAES;EAAU,CAAE,GAAGR,cAAc,EAAE;EACvC,MAAMS,0BAA0B,GAAGR,6BAA6B,EAAE;EAElE,MAAMS,EAAA,GAAwBZ,WAAW,CACvC,CAAC;MAAEa;IAAM,CAAE,KAAKH,UAAU,CAACI,qBAAqB,CAACD,MAAM,CAAC,EAAAE,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAEnDT,OAAO;MACVD,SAAS,EAAEA,CAACW,YAAY,EAAEC,SAAS,EAAEC,OAAO,KAAI;QAC9CV,WAAW,CAACW,cAAc,CACxB;UAAEC,QAAQ,EAAEV,0BAA0B;UAAEW,KAAK,EAAE;QAAK,CAAE,EACrDC,YAAY,IAAI;UACf,MAAMC,KAAK,GAAGD,YAAY,CAACC,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAI;YAC5C,MAAMC,IAAI,GAAGD,IAAI,CAACC,IAAI,CAACF,GAAG,CAAEG,OAAO,IAAI;cACrC,OAAAb,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAYY,OAAO;gBAAEC,IAAI,EAAE,IAAI;gBAAEC,IAAI,EAAE;cAAI;YAC7C,CAAC,CAAC;YAEF,OAAAf,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKU,IAAI;cACPC;YAAI;UAER,CAAC,CAAC;UAEF,OAAO;YACLI,UAAU,EAAER,YAAY,CAACQ,UAAU;YACnCP;WACD;QACH,CAAC,CACF;QACDlB,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAGW,YAAY,EAAEC,SAAS,EAAEC,OAAO,CAAC;MAC/C;IAAC,GAEJ;IA5BK;MAAEa;IAAM,IAAApB,EA4Bb;IA5BkBqB,MAAM,GAAAzB,MAAA,CAAAI,EAAA,EAAnB,UAAqB,CA4B1B;EAED,OAAAG,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAYiB,MAAM;IAAEC,uBAAuB,EAAEF;EAAM;AACrD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}