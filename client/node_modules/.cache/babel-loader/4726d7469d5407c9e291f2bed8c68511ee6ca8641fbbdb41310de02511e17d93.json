{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport { NotificationsContext } from './notifications.context';\nimport { useFetchNotifications, useRemoveNotification, useRemoveAllNotifications, useUnseenCount, useUnreadCount } from '../hooks';\nimport { useMarkNotificationsAs } from '../hooks';\nimport { useMarkNotificationsAsRead } from '../hooks/useMarkNotificationAsRead';\nimport { useMarkNotificationsAsSeen } from '../hooks/useMarkNotificationAsSeen';\nimport { useStore } from '../hooks/useStore';\nimport { StoreProvider } from './store-provider.context';\nconst DEFAULT_STORES = [{\n  storeId: 'default_store'\n}];\nexport function NotificationsProvider({\n  children,\n  stores = DEFAULT_STORES\n}) {\n  return React.createElement(StoreProvider, {\n    stores: stores\n  }, React.createElement(NotificationsProviderInternal, null, children));\n}\nfunction NotificationsProviderInternal({\n  children\n}) {\n  const {\n    storeQuery,\n    storeId,\n    stores,\n    setStore\n  } = useStore();\n  const {\n    data: notificationsPages,\n    hasNextPage,\n    isLoading,\n    isFetching,\n    isFetchingNextPage,\n    fetchNextPage,\n    refetch\n  } = useFetchNotifications({\n    query: storeQuery\n  });\n  const {\n    data: unseenCountData\n  } = useUnseenCount();\n  const {\n    data: unreadCountData\n  } = useUnreadCount();\n  const {\n    markNotificationsAs\n  } = useMarkNotificationsAs();\n  const {\n    removeNotification\n  } = useRemoveNotification();\n  const {\n    removeAllNotifications\n  } = useRemoveAllNotifications();\n  const {\n    markNotificationsAsRead\n  } = useMarkNotificationsAsRead();\n  const {\n    markNotificationsAsSeen\n  } = useMarkNotificationsAsSeen();\n  const markNotificationAsRead = useCallback(messageId => markNotificationsAs({\n    messageId,\n    seen: true,\n    read: true\n  }), [markNotificationsAs]);\n  const markNotificationAsUnRead = useCallback(messageId => markNotificationsAs({\n    messageId,\n    seen: true,\n    read: false\n  }), [markNotificationsAs]);\n  const removeMessage = useCallback(messageId => removeNotification({\n    messageId\n  }), [removeNotification]);\n  const removeAllMessages = useCallback(feedId => removeAllNotifications({\n    feedId\n  }), [removeAllNotifications]);\n  const markAllNotificationsAsRead = useCallback(() => {\n    markNotificationsAsRead({\n      feedId: storeQuery === null || storeQuery === void 0 ? void 0 : storeQuery.feedIdentifier\n    });\n  }, [markNotificationsAsRead, storeQuery === null || storeQuery === void 0 ? void 0 : storeQuery.feedIdentifier]);\n  const markAllNotificationsAsSeen = useCallback(() => {\n    markNotificationsAsSeen({\n      feedId: storeQuery === null || storeQuery === void 0 ? void 0 : storeQuery.feedIdentifier\n    });\n  }, [markNotificationsAsSeen, storeQuery === null || storeQuery === void 0 ? void 0 : storeQuery.feedIdentifier]);\n  const markNotificationAsSeen = useCallback(messageId => markNotificationsAs({\n    messageId,\n    seen: true,\n    read: false\n  }), [markNotificationsAs]);\n  const markFetchedNotificationsAsRead = useCallback(() => {\n    if (!notificationsPages) {\n      return;\n    }\n    const messageIds = notificationsPages.pages.reduce((acc, paginatedResponse) => {\n      const pageMessageIds = paginatedResponse.data.filter(message => !message.read).map(message => message._id);\n      return [...acc, ...pageMessageIds];\n    }, []);\n    if (messageIds.length > 0) {\n      markNotificationsAs({\n        messageId: messageIds,\n        seen: true,\n        read: true\n      });\n    }\n  }, [markNotificationsAs, notificationsPages]);\n  const markFetchedNotificationsAsSeen = useCallback(() => {\n    if (!notificationsPages) {\n      return;\n    }\n    const messageIds = notificationsPages.pages.reduce((acc, paginatedResponse) => {\n      const pageMessagesIds = paginatedResponse.data.filter(message => !message.seen && !message.read).map(message => message._id);\n      return [...acc, ...pageMessagesIds];\n    }, []);\n    if (messageIds.length > 0) {\n      markNotificationsAs({\n        messageId: messageIds,\n        seen: true,\n        read: false\n      });\n    }\n  }, [markNotificationsAs, notificationsPages]);\n  const notifications = useMemo(() => notificationsPages === null || notificationsPages === void 0 ? void 0 : notificationsPages.pages.reduce((acc, paginatedResponse) => [...acc, ...paginatedResponse.data], []), [notificationsPages]);\n  const contextValue = useMemo(() => {\n    var _a, _b;\n    return {\n      storeQuery,\n      storeId,\n      stores,\n      unseenCount: (_a = unseenCountData === null || unseenCountData === void 0 ? void 0 : unseenCountData.count) !== null && _a !== void 0 ? _a : 0,\n      unreadCount: (_b = unreadCountData === null || unreadCountData === void 0 ? void 0 : unreadCountData.count) !== null && _b !== void 0 ? _b : 0,\n      notifications,\n      hasNextPage,\n      isLoading,\n      isFetching,\n      isFetchingNextPage,\n      setStore,\n      fetchNextPage,\n      refetch,\n      markNotificationAsSeen,\n      markNotificationAsRead,\n      markNotificationAsUnRead,\n      markFetchedNotificationsAsRead,\n      markFetchedNotificationsAsSeen,\n      removeMessage,\n      removeAllMessages,\n      markAllNotificationsAsRead,\n      markAllNotificationsAsSeen\n    };\n  }, [storeQuery, storeId, stores, unseenCountData === null || unseenCountData === void 0 ? void 0 : unseenCountData.count, unreadCountData === null || unreadCountData === void 0 ? void 0 : unreadCountData.count, notifications, hasNextPage, isLoading, isFetching, isFetchingNextPage, setStore, fetchNextPage, refetch, markNotificationAsSeen, markNotificationAsRead, markNotificationAsUnRead, markFetchedNotificationsAsRead, markFetchedNotificationsAsSeen, removeMessage, removeAllMessages, markAllNotificationsAsRead, markAllNotificationsAsSeen]);\n  return React.createElement(NotificationsContext.Provider, {\n    value: contextValue\n  }, children);\n}","map":{"version":3,"names":["React","useCallback","useMemo","NotificationsContext","useFetchNotifications","useRemoveNotification","useRemoveAllNotifications","useUnseenCount","useUnreadCount","useMarkNotificationsAs","useMarkNotificationsAsRead","useMarkNotificationsAsSeen","useStore","StoreProvider","DEFAULT_STORES","storeId","NotificationsProvider","children","stores","createElement","NotificationsProviderInternal","storeQuery","setStore","data","notificationsPages","hasNextPage","isLoading","isFetching","isFetchingNextPage","fetchNextPage","refetch","query","unseenCountData","unreadCountData","markNotificationsAs","removeNotification","removeAllNotifications","markNotificationsAsRead","markNotificationsAsSeen","markNotificationAsRead","messageId","seen","read","markNotificationAsUnRead","removeMessage","removeAllMessages","feedId","markAllNotificationsAsRead","feedIdentifier","markAllNotificationsAsSeen","markNotificationAsSeen","markFetchedNotificationsAsRead","messageIds","pages","reduce","acc","paginatedResponse","pageMessageIds","filter","message","map","_id","length","markFetchedNotificationsAsSeen","pageMessagesIds","notifications","contextValue","unseenCount","_a","count","unreadCount","_b","Provider","value"],"sources":["../../../src/store/notifications-provider.context.tsx"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}