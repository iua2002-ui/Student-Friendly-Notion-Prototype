import { IMessage, ButtonTypeEnum, MessageActionStatusEnum, IPaginatedResponse } from '@novu/shared';
import { ITabCountQuery, IStoreQuery, IUserPreferenceSettings, IUnseenCountQuery, IUnreadCountQuery, IUserGlobalPreferenceSettings } from '../index';
export declare class ApiService {
    private backendUrl;
    private httpClient;
    isAuthenticated: boolean;
    constructor(backendUrl: string);
    setAuthorizationToken(token: string): void;
    disposeAuthorizationToken(): void;
    updateAction(messageId: string, executedType: ButtonTypeEnum, status: MessageActionStatusEnum, payload?: Record<string, unknown>): Promise<any>;
    markMessageAs(messageId: string | string[], mark: {
        seen?: boolean;
        read?: boolean;
    }): Promise<any>;
    removeMessage(messageId: string): Promise<any>;
    removeAllMessages(feedId?: string): Promise<any>;
    markAllMessagesAsRead(feedId?: string | string[]): Promise<any>;
    markAllMessagesAsSeen(feedId?: string | string[]): Promise<any>;
    getNotificationsList(page: number, { payload, ...rest }?: IStoreQuery): Promise<IPaginatedResponse<IMessage>>;
    initializeSession(appId: string, subscriberId: string, hmacHash?: any): Promise<any>;
    postUsageLog(name: string, payload: {
        [key: string]: string | boolean | undefined;
    }): Promise<any>;
    getUnseenCount(query?: IUnseenCountQuery): Promise<any>;
    getUnreadCount(query?: IUnreadCountQuery): Promise<any>;
    getTabCount(query?: ITabCountQuery): Promise<any>;
    getOrganization(): Promise<any>;
    getUserPreference(): Promise<IUserPreferenceSettings[]>;
    getUserGlobalPreference(): Promise<IUserGlobalPreferenceSettings[]>;
    updateSubscriberPreference(templateId: string, channelType: string, enabled: boolean): Promise<IUserPreferenceSettings>;
    updateSubscriberGlobalPreference(preferences: {
        channelType: string;
        enabled: boolean;
    }[], enabled?: boolean): Promise<IUserPreferenceSettings>;
}
//# sourceMappingURL=api.service.d.ts.map